{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":23812,"sourceType":"datasetVersion","datasetId":17810},{"sourceId":10857195,"sourceType":"datasetVersion","datasetId":6696646},{"sourceId":10943134,"sourceType":"datasetVersion","datasetId":6705385}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true},"colab":{"provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/hibamessai/pneumonia-detiction-valid-98.66abead3-8c84-408c-bae8-91196a25c8be.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20250412/auto/storage/goog4_request&X-Goog-Date=20250412T224638Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=588c3e52810518c2823448944f95f7788fed531b28e9d20f4c535a30926304c71e083b58e6fff738feda55d3406435bfc710c70535f536e342a32f8f220121f420f1f61e65153de4442dadbfbd7cbbf8127ca58d65d194e7a23b27466fabd53007d0692ddc670e99a3be8116ab7eb7ef9a145f3cf700bae5178a08ed2e7319770e8f6e95efde6d883cd0b0577c9d2ff3d6156441e76e28ea76fb857c46aeda9ce0506eb71a42f0e67c42588e7b6237e48eea6ced1eee9917403bf8134d149f5f8a9eadb0ee82caa85bb7929178a1ed826b0ea8e7513380ceead5d936e0eb562d5f6701c4a22b79696411bf92b47c567fc6f621652fa6e4099cb378d62e0cf627","timestamp":1744499436248}]}},"nbformat_minor":0,"nbformat":4,"cells":[{"source":[" # IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,\n","# THEN FEEL FREE TO DELETE THIS CELL.\n","# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n","# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n","# NOTEBOOK.\n","import kagglehub\n","paultimothymooney_chest_xray_pneumonia_path = kagglehub.dataset_download('paultimothymooney/chest-xray-pneumonia')\n","youssefbedeer_weights_path = kagglehub.dataset_download('youssefbedeer/weights')\n","youssefbedeer_chest_image_path = kagglehub.dataset_download('youssefbedeer/chest-image')\n","\n","print('Data source import complete.')\n"],"metadata":{"id":"HZKA4rgQLwGJ","executionInfo":{"status":"ok","timestamp":1745520861134,"user_tz":-60,"elapsed":25918,"user":{"displayName":"hiba messai","userId":"02972177301805376406"}},"outputId":"47f99c80-e10d-45ed-9744-208d04837e41","colab":{"base_uri":"https://localhost:8080/"}},"cell_type":"code","outputs":[{"output_type":"stream","name":"stdout","text":["Warning: Looks like you're using an outdated `kagglehub` version (installed: 0.3.11), please consider upgrading to the latest version (0.3.12).\n","Downloading from https://www.kaggle.com/api/v1/datasets/download/youssefbedeer/weights?dataset_version_number=2...\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 307M/307M [00:03<00:00, 81.9MB/s]"]},{"output_type":"stream","name":"stdout","text":["Extracting files...\n"]},{"output_type":"stream","name":"stderr","text":["\n"]},{"output_type":"stream","name":"stdout","text":["Warning: Looks like you're using an outdated `kagglehub` version (installed: 0.3.11), please consider upgrading to the latest version (0.3.12).\n","Downloading from https://www.kaggle.com/api/v1/datasets/download/youssefbedeer/chest-image?dataset_version_number=4...\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1.53M/1.53M [00:00<00:00, 38.2MB/s]"]},{"output_type":"stream","name":"stdout","text":["Extracting files...\n","Data source import complete.\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}],"execution_count":1},{"cell_type":"markdown","source":["<h3 style=\"color: #9AE6B4; font-size: 18px; font-weight: 500; margin-top: 18px; padding-left: 10px; border-left: 3px solid #68D391;\">\n","    Core Data Processing Libraries\n","</h3>\n","General-purpose libraries for data manipulation, visualization, and utility functions"],"metadata":{"id":"YQp_WgbYLwGN"}},{"cell_type":"code","source":["import pandas as pd              # Data manipulation and analysis\n","import numpy as np               # Numerical computations and array handling\n","import matplotlib.pyplot as plt  # Basic plotting and visualization\n","import seaborn as sns            # Enhanced statistical visualizations\n","import os                        # Filesystem operations\n","import cv2                       # OpenCV for image processing\n","from PIL import Image            # Image handling and manipulation\n","from itertools import chain      # Utility for flattening iterables\n","# from tqdm import tqdm            # Progress bar for loops\n","# from tqdm.notebook import tqdm\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:09:54.157648Z","iopub.execute_input":"2025-03-07T02:09:54.158082Z","iopub.status.idle":"2025-03-07T02:09:55.78918Z","shell.execute_reply.started":"2025-03-07T02:09:54.158036Z","shell.execute_reply":"2025-03-07T02:09:55.788528Z"},"id":"nmQnKI31LwGO"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<h3 style=\"color: #9AE6B4; font-size: 18px; font-weight: 500; margin-top: 18px; padding-left: 10px; border-left: 3px solid #68D391;\">\n","    Machine Learning Utilities\n","</h3>\n","Scikit-learn tools for evaluation metrics and class weight computation\n"],"metadata":{"id":"IijWNjmvLwGO"}},{"cell_type":"code","source":["from sklearn.utils.class_weight import compute_class_weight  # Balancing class weights\n","from sklearn.metrics import (                                # Model evaluation metrics\n","    confusion_matrix, classification_report, accuracy_score,\n","    precision_score, recall_score, f1_score\n",")\n","from sklearn.model_selection import train_test_split\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:09:55.790243Z","iopub.execute_input":"2025-03-07T02:09:55.790642Z","iopub.status.idle":"2025-03-07T02:09:55.958231Z","shell.execute_reply.started":"2025-03-07T02:09:55.790609Z","shell.execute_reply":"2025-03-07T02:09:55.957351Z"},"id":"LqYkYx3ULwGP"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":[" <h3 style=\"color: #9AE6B4; font-size: 18px; font-weight: 500; margin-top: 18px; padding-left: 10px; border-left: 3px solid #68D391;\">\n","    TensorFlow/Keras Deep Learning Framework\n","</h3>\n","Core Keras imports for building, training, and evaluating neural networks\n"],"metadata":{"id":"Gx3sSl89LwGP"}},{"cell_type":"code","source":["from tensorflow.keras.models import load_model, Model, Sequential  # Model creation and loading\n","from tensorflow.keras import layers, regularizers, Model\n","from tensorflow.keras.optimizers import Adamax, SGD               # Optimization algorithms\n","from tensorflow.keras.regularizers import l2                      # Regularization for preventing overfitting\n","from tensorflow.keras.utils import to_categorical, plot_model     # Data preprocessing and model visualization\n","from tensorflow.keras.callbacks import (                          # Training callbacks\n","    EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\n",")\n","from tensorflow.keras.preprocessing.image import img_to_array"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:09:55.959852Z","iopub.execute_input":"2025-03-07T02:09:55.960152Z","iopub.status.idle":"2025-03-07T02:10:08.394279Z","shell.execute_reply.started":"2025-03-07T02:09:55.960126Z","shell.execute_reply":"2025-03-07T02:10:08.393577Z"},"id":"9wDvpp_dLwGP"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<h3 style=\"color: #9AE6B4; font-size: 18px; font-weight: 500; margin-top: 18px; padding-left: 10px; border-left: 3px solid #68D391;\">\n","    Image Preprocessing and Data Augmentation\n","</h3>\n","Tools for loading and augmenting image data"],"metadata":{"id":"iOP2engQLwGP"}},{"cell_type":"code","source":["from tensorflow.keras.preprocessing import image_dataset_from_directory  # Dataset loading from directories\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator     # Real-time data augmentation"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:10:08.395514Z","iopub.execute_input":"2025-03-07T02:10:08.396041Z","iopub.status.idle":"2025-03-07T02:10:08.399507Z","shell.execute_reply.started":"2025-03-07T02:10:08.396017Z","shell.execute_reply":"2025-03-07T02:10:08.398698Z"},"id":"zVWt57vWLwGQ"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<h3 style=\"color: #9AE6B4; font-size: 18px; font-weight: 500; margin-top: 18px; padding-left: 10px; border-left: 3px solid #68D391;\">\n","    Pretrained Models\n","</h3>\n","Transfer learning models from Keras Applications\n"],"metadata":{"id":"rEfz-RceLwGQ"}},{"cell_type":"code","source":["from tensorflow.keras.applications import (                      # Classic pretrained CNN architectures\n","    VGG16, EfficientNetB0, InceptionV3, MobileNetV2, DenseNet121\n",")\n","from tensorflow.keras.applications.efficientnet import EfficientNetB0  # EfficientNet model"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:10:08.400368Z","iopub.execute_input":"2025-03-07T02:10:08.400641Z","iopub.status.idle":"2025-03-07T02:10:08.55256Z","shell.execute_reply.started":"2025-03-07T02:10:08.400613Z","shell.execute_reply":"2025-03-07T02:10:08.551756Z"},"id":"l2SwaEheLwGQ"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<h3 style=\"color: #9AE6B4; font-size: 18px; font-weight: 500; margin-top: 18px; padding-left: 10px; border-left: 3px solid #68D391;\">\n","    Miscellaneous\n","</h3>\n","Suppress warnings for cleaner output"],"metadata":{"id":"SqyUWz5cLwGQ"}},{"cell_type":"code","source":["import warnings\n","warnings.filterwarnings('ignore')"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:10:08.553378Z","iopub.execute_input":"2025-03-07T02:10:08.553594Z","iopub.status.idle":"2025-03-07T02:10:08.562205Z","shell.execute_reply.started":"2025-03-07T02:10:08.553575Z","shell.execute_reply":"2025-03-07T02:10:08.561392Z"},"id":"0PVh6nFmLwGQ"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<h3 style=\"color: #9AE6B4; font-size: 18px; font-weight: 500; margin-top: 18px; padding-left: 10px; border-left: 3px solid #68D391;\">\n","    Styling\n","</h3>\n","Set a professional style for consistency and readability\n"],"metadata":{"id":"gHq4wdMaLwGQ"}},{"cell_type":"code","source":["plt.style.use('seaborn-v0_8-whitegrid')  # Clean, professional aesthetic\n","sns.set_palette(\"deep\")  # Subtle, professional color scheme"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:10:08.562982Z","iopub.execute_input":"2025-03-07T02:10:08.563221Z","iopub.status.idle":"2025-03-07T02:10:08.572183Z","shell.execute_reply.started":"2025-03-07T02:10:08.563193Z","shell.execute_reply":"2025-03-07T02:10:08.571386Z"},"id":"6fZqmgUqLwGQ"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<div style='background-color: rgba(49, 130, 206, 0.1); border-left: 4px solid #3182CE; '>\n","    <h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","    2.2. Define constants        \n","    </h2>\n","    <p style='padding-left: 20px; padding-bottom: 20px'>\n","    Fixed values used throughout the notebook for reproducibility and configuration\n","</p>\n","</div>\n"],"metadata":{"id":"kp_BsQ5WLwGQ"}},{"cell_type":"code","source":["H, W = 224, 224\n","IMG_SIZE = (H, W)                      # Standard input size for pretrained models\n","IMG_SHAPE = (H, W, 3)\n","BATCH_SIZE = 32                        # Number of samples per gradient update\n","EPOCHS = 10                            # Maximum training iterations\n","LEARNING_RATE = 0.0001                 # Initial learning rate for optimizers\n","CLASS_NAMES = ['NORMAL', 'PNEUMONIA']  # Example class labels pneumonia\n","CLASS_COUNT = len(CLASS_NAMES)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:10:08.574755Z","iopub.execute_input":"2025-03-07T02:10:08.575017Z","iopub.status.idle":"2025-03-07T02:10:08.583595Z","shell.execute_reply.started":"2025-03-07T02:10:08.574995Z","shell.execute_reply":"2025-03-07T02:10:08.582926Z"},"id":"DohfVCISLwGQ"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<h1 style=\"color: #63B3ED; font-size: 28px; font-weight: 600; padding-bottom: 8px; border-bottom: 2px solid #4299E1; margin-top: 25px;\">\n","    3. Image Preprocessing\n","</h1>\n","make image data ready for training"],"metadata":{"id":"mHegcdJpLwGR"}},{"cell_type":"markdown","source":["<div style='background-color: rgba(49, 130, 206, 0.1); border-left: 4px solid #3182CE; '>\n","    <h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","    3.1. Load data\n","    </h2>\n","    <p style='padding-left: 20px; padding-bottom: 20px'>\n","    load data from kaggle data sets , combine all the images in one data frame\n","</p>\n","</div>\n"],"metadata":{"id":"QQI9B2biLwGR"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"cPXbrpT6QmL5","executionInfo":{"status":"ok","timestamp":1744499299730,"user_tz":-60,"elapsed":23267,"user":{"displayName":"","userId":""}},"outputId":"0681aec3-ab1e-46d8-c17d-65ae85bc1759","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["import os\n","import pandas as pd\n","\n","\n","# Define the base directory where your data is stored (adjust this path)\n","base_dir = \"/content/drive/MyDrive/test/test/chest_xray/chest_xray\"  # e.g., \"C:/pneumonia_project/data\"\n","\n","# List of dataset splits\n","splits = [\"test\", \"train\", \"val\"]\n","labels = [\"NORMAL\", \"PNEUMONIA\"]\n","\n","# Initialize lists to store file paths and labels\n","file_paths = []\n","file_labels = []\n","\n","# Loop through each split (train, valid, test)\n","for split in splits:\n","    split_dir = os.path.join(base_dir, split)\n","    # Loop through each label (normal, pneumonia)\n","    for label in labels:\n","        label_dir = os.path.join(split_dir, label)\n","\n","        # Check if the directory exists\n","        if os.path.exists(label_dir):\n","            # Get all files in the label directory\n","            for file_name in os.listdir(label_dir):\n","                # Ensure it's a file (not a directory)\n","                if os.path.isfile(os.path.join(label_dir, file_name)):\n","                    # Add the full file path and corresponding label\n","                    file_paths.append(os.path.join(label_dir, file_name))\n","                    file_labels.append(label)\n","\n","# Create a DataFrame with 'name' and 'label' columns\n","df = pd.DataFrame({\n","    \"name\": file_paths,\n","    \"label\": file_labels\n","})\n","\n","# Optional: Save to a CSV file\n","df.to_csv(\"pneumonia_dataset.csv\", index=False)\n","print(\"DataFrame saved as 'pneumonia_dataset.csv'\")"],"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:10:08.585287Z","iopub.execute_input":"2025-03-07T02:10:08.585621Z","iopub.status.idle":"2025-03-07T02:10:13.722047Z","shell.execute_reply.started":"2025-03-07T02:10:08.585593Z","shell.execute_reply":"2025-03-07T02:10:13.721162Z"},"id":"qulH94ywLwGR","executionInfo":{"status":"ok","timestamp":1744499368231,"user_tz":-60,"elapsed":10974,"user":{"displayName":"","userId":""}},"outputId":"09a419e2-9594-42e8-bd1c-da396e6ece8d","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["DataFrame saved as 'pneumonia_dataset.csv'\n"]}],"execution_count":null},{"cell_type":"code","source":["df.head()"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:10:13.722835Z","iopub.execute_input":"2025-03-07T02:10:13.723098Z","iopub.status.idle":"2025-03-07T02:10:13.746337Z","shell.execute_reply.started":"2025-03-07T02:10:13.723075Z","shell.execute_reply":"2025-03-07T02:10:13.745304Z"},"id":"Eyc4OFXNLwGR","executionInfo":{"status":"ok","timestamp":1744499379017,"user_tz":-60,"elapsed":38,"user":{"displayName":"","userId":""}},"outputId":"a32986fd-fc57-4af8-a58d-4266f38ab5c7","colab":{"base_uri":"https://localhost:8080/","height":206}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                name   label\n","0  /content/drive/MyDrive/test/test/chest_xray/ch...  NORMAL\n","1  /content/drive/MyDrive/test/test/chest_xray/ch...  NORMAL\n","2  /content/drive/MyDrive/test/test/chest_xray/ch...  NORMAL\n","3  /content/drive/MyDrive/test/test/chest_xray/ch...  NORMAL\n","4  /content/drive/MyDrive/test/test/chest_xray/ch...  NORMAL"],"text/html":["\n","  <div id=\"df-fcf8bb79-5b84-4f8e-981e-53bbd1864a61\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>name</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/drive/MyDrive/test/test/chest_xray/ch...</td>\n","      <td>NORMAL</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/drive/MyDrive/test/test/chest_xray/ch...</td>\n","      <td>NORMAL</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/drive/MyDrive/test/test/chest_xray/ch...</td>\n","      <td>NORMAL</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/drive/MyDrive/test/test/chest_xray/ch...</td>\n","      <td>NORMAL</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/drive/MyDrive/test/test/chest_xray/ch...</td>\n","      <td>NORMAL</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fcf8bb79-5b84-4f8e-981e-53bbd1864a61')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fcf8bb79-5b84-4f8e-981e-53bbd1864a61 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fcf8bb79-5b84-4f8e-981e-53bbd1864a61');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d23cc917-ac49-4532-94f5-718405bd4536\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d23cc917-ac49-4532-94f5-718405bd4536')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d23cc917-ac49-4532-94f5-718405bd4536 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 3145,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3145,\n        \"samples\": [\n          \"/content/drive/MyDrive/test/test/chest_xray/chest_xray/train/PNEUMONIA/person51_bacteria_240.jpeg\",\n          \"/content/drive/MyDrive/test/test/chest_xray/chest_xray/train/PNEUMONIA/person470_bacteria_2001.jpeg\",\n          \"/content/drive/MyDrive/test/test/chest_xray/chest_xray/train/NORMAL/IM-0464-0001.jpeg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"PNEUMONIA\",\n          \"NORMAL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":13}],"execution_count":null},{"cell_type":"markdown","source":["<div style='background-color: rgba(49, 130, 206, 0.1); border-left: 4px solid #3182CE; '>\n","    <h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","    3.2. Split the data\n","    </h2>\n","    <p style='padding-left: 20px; padding-bottom: 20px'>\n","split data into 65% <span style='font-weight:bold; color:orange'>training</span> , 20% <span style='font-weight:bold; color:orange'>validation</span> , 15% <span style='font-weight:bold; color:orange'>testing</span>\n","</p>\n","</div>\n","\n","\n"],"metadata":{"id":"xOiu08AFLwGR"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","\n","# Assuming your DataFrame is already created (e.g., from the previous step)\n","# If not, load it from the CSV:\n","# df = pd.read_csv(\"pneumonia_dataset.csv\")\n","\n","# Shuffle the DataFrame\n","df = df.sample(frac=1, random_state=42).reset_index(drop=True)\n","\n","# First split: 70% train, 30% remaining\n","train_df, temp_df = train_test_split(\n","    df,\n","    test_size=0.35,  # 30% for valid + test\n","    stratify=df[\"label\"],  # Ensure label proportions are maintained\n","    random_state=42\n",")\n","\n","# Second split: 20% valid, 10% test (from the original data)\n","# Since temp_df is 30%, we split it as 2/3 (20%) and 1/3 (10%) of original\n","valid_df, test_df = train_test_split(\n","    temp_df,\n","    test_size=0.4,  # 10/30 = 1/3 for test\n","    stratify=temp_df[\"label\"],\n","    random_state=42\n",")\n","\n","# Verify the sizes\n","print(f\"Train set: {len(train_df)} samples ({len(train_df)/len(df)*100:.1f}%)\")\n","print(f\"Validation set: {len(valid_df)} samples ({len(valid_df)/len(df)*100:.1f}%)\")\n","print(f\"Test set: {len(test_df)} samples ({len(test_df)/len(df)*100:.1f}%)\")\n","print(f\"Total: {len(train_df) + len(valid_df) + len(test_df)} samples\")\n","\n","\n","# Optional: Save the splits to CSV files\n","train_df.to_csv(\"train_split.csv\", index=False)\n","valid_df.to_csv(\"valid_split.csv\", index=False)\n","test_df.to_csv(\"test_split.csv\", index=False)\n","print(\"\\nSplits saved as 'train_split.csv', 'valid_split.csv', and 'test_split.csv'\")"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:10:13.747336Z","iopub.execute_input":"2025-03-07T02:10:13.747581Z","iopub.status.idle":"2025-03-07T02:10:13.832544Z","shell.execute_reply.started":"2025-03-07T02:10:13.747547Z","shell.execute_reply":"2025-03-07T02:10:13.831815Z"},"id":"wIidFBUxLwGR","executionInfo":{"status":"ok","timestamp":1744499388486,"user_tz":-60,"elapsed":17,"user":{"displayName":"","userId":""}},"outputId":"20516419-7fc6-4ef6-80af-c8a1a5101ba3","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["Train set: 2044 samples (65.0%)\n","Validation set: 660 samples (21.0%)\n","Test set: 441 samples (14.0%)\n","Total: 3145 samples\n","\n","Splits saved as 'train_split.csv', 'valid_split.csv', and 'test_split.csv'\n"]}],"execution_count":null},{"cell_type":"markdown","source":["<div style=\"margin: 30px 0; height: 2px; background: linear-gradient(90deg, #2D3748, #4299E1, #2D3748); width: 100%;\"></div>"],"metadata":{"id":"RqXBFkt7LwGR"}},{"cell_type":"code","source":["# Initialize the figure with a suitable size for publication or presentation\n","plt.figure(figsize=(12, 10), dpi=100)\n","\n","# 1. Pie Chart: Dataset Split\n","plt.subplot(2, 2, 1)\n","sizes = [len(train_df), len(valid_df), len(test_df)]\n","labels = ['Training Set', 'Validation Set', 'Test Set']\n","plt.pie(sizes, labels=labels, autopct=lambda pct: f'{pct:.1f}%', startangle=90,\n","        textprops={'fontsize': 12}, wedgeprops={'edgecolor': 'white', 'linewidth': 1})\n","plt.title('Dataset Split', fontsize=14, fontweight='bold', pad=10)\n","plt.axis('equal')  # Ensures circular pie chart\n","\n","# 2. Bar Plot: Overall Label Distribution\n","plt.subplot(2, 2, 2)\n","ax2 = sns.countplot(x=\"label\", data=df, edgecolor='black', linewidth=0.5)\n","for p in ax2.patches:\n","    height = p.get_height()\n","    if height > 0:  # Only annotate non-zero bars\n","        ax2.text(\n","            p.get_x() + p.get_width() / 2.,\n","            height + 0.5,\n","            f'{int(height)}',\n","            ha='center',\n","            va='bottom',\n","            fontsize=10\n","        )\n","plt.title(\"Overall Label Distribution\", fontsize=14, fontweight='bold', pad=10)\n","plt.xlabel(\"Class\", fontsize=12)\n","plt.ylabel(\"Count\", fontsize=12)\n","plt.xticks(fontsize=10)\n","plt.yticks(fontsize=10)\n","\n","# 3. Pie Chart: Label Proportion\n","plt.subplot(2, 2, 3)\n","df[\"label\"].value_counts(normalize=True).plot(\n","    kind=\"pie\", autopct=\"%1.1f%%\", textprops={'fontsize': 12},\n","    wedgeprops={'edgecolor': 'white', 'linewidth': 1})\n","plt.title(\"Label Proportion\", fontsize=14, fontweight='bold', pad=10)\n","plt.ylabel(\"\")  # Remove y-label for cleaner look\n","\n","# 4. Grouped Bar Plot: Label Distribution by Split\n","plt.subplot(2, 2, 4)\n","combined_df = pd.concat([\n","    train_df.assign(split=\"Train\"),\n","    valid_df.assign(split=\"Validation\"),\n","    test_df.assign(split=\"Test\")\n","])\n","\n","# Create the grouped bar plot\n","ax = sns.countplot(x=\"label\", hue=\"split\", data=combined_df, edgecolor='black', linewidth=0.5)\n","\n","# Add numbers above each bar\n","for p in ax.patches:\n","    height = p.get_height()\n","    if height > 0:  # Only annotate bars with a height (avoid empty categories)\n","        ax.text(\n","            p.get_x() + p.get_width() / 2.,  # Center of the bar (x-coordinate)\n","            height + 0.5,                     # Slightly above the bar (y-coordinate)\n","            f'{int(height)}',                 # The count as an integer\n","            ha='center',                      # Horizontal alignment: center\n","            va='bottom',                      # Vertical alignment: bottom\n","            fontsize=10\n","        )\n","\n","# Customize the plot\n","plt.title(\"Label Distribution by Split\", fontsize=14, fontweight='bold', pad=10)\n","plt.xlabel(\"Class\", fontsize=12)\n","plt.ylabel(\"Count\", fontsize=12)\n","plt.xticks(fontsize=10)\n","plt.yticks(fontsize=10)\n","plt.legend(title=\"Dataset Split\", title_fontsize=12, fontsize=10, loc='best')\n","\n","# Adjust layout for a polished appearance\n","plt.tight_layout(pad=3.0)\n","plt.suptitle(\"Dataset and Label Distribution Analysis\", fontsize=16, fontweight='bold', y=1.05)\n","\n","# Display the plot\n","plt.show()\n","\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:10:13.833324Z","iopub.execute_input":"2025-03-07T02:10:13.833645Z","iopub.status.idle":"2025-03-07T02:10:14.565782Z","shell.execute_reply.started":"2025-03-07T02:10:13.833621Z","shell.execute_reply":"2025-03-07T02:10:14.564876Z"},"id":"RSHN367sLwGR","executionInfo":{"status":"ok","timestamp":1744499410462,"user_tz":-60,"elapsed":1479,"user":{"displayName":"","userId":""}},"outputId":"ebcaf729-83b8-49cf-b748-db6400d9c692","colab":{"base_uri":"https://localhost:8080/","height":1000}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x1000 with 4 Axes>"],"image/png":"\n"},"metadata":{}}],"execution_count":null},{"cell_type":"markdown","source":["<div style='background-color: rgba(49, 130, 206, 0.1); border-left: 4px solid #3182CE; '>\n","    <h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","        3.3. Data Generator\n","    </h2>\n","    <p style='padding-left: 20px; padding-bottom: 20px'>\n","        A data generator is a tool or function in machine learning that efficiently loads, preprocesses, and feeds data (like images) to a model in small batches during training. Instead of loading an entire dataset into memory at once, it processes data on-the-fly, often applying transformations (e.g., resizing, normalization, or augmentation) to improve model performance. In your case, it would take image file paths and labels from a DataFrame (like train_df), prepare them (e.g., resize to 224x224 and scale pixel values), and deliver them in batches for training a model to classify \"NORMAL\" vs. \"PNEUMONIA\"\n","</p>\n","</div>\n","\n","\n"],"metadata":{"id":"Gg_A392ILwGR"}},{"cell_type":"markdown","source":["<h3 style=\"color: #9AE6B4; font-size: 18px; font-weight: 500; margin-top: 18px; padding-left: 10px; border-left: 3px solid #68D391;\">\n","    Apply genenrator\n","</h3>\n","\n"],"metadata":{"id":"L8YhNh9eLwGR"}},{"cell_type":"code","source":["# Calculate optimal test batch size\n","ts_length = len(test_df)\n","test_batch_size = max(sorted([ts_length // n for n in range(1, ts_length + 1) if ts_length % n == 0 and ts_length / n <= 80]))\n","test_steps = ts_length // test_batch_size\n","print(f\"Test data length: {ts_length}, Test batch size: {test_batch_size}, Test steps: {test_steps}\")\n","\n","\n","# Data generators\n","tr_gen = ImageDataGenerator()\n","ts_gen = ImageDataGenerator()\n","\n","train_gen = tr_gen.flow_from_dataframe(\n","    train_df, x_col='name', y_col='label', target_size=IMG_SIZE,\n","    class_mode='categorical', color_mode='rgb', shuffle=True, batch_size=BATCH_SIZE\n",")\n","valid_gen = ts_gen.flow_from_dataframe(\n","    valid_df, x_col='name', y_col='label', target_size=IMG_SIZE,\n","    class_mode='categorical', color_mode='rgb', shuffle=True, batch_size=BATCH_SIZE\n",")\n","test_gen = ts_gen.flow_from_dataframe(\n","    test_df, x_col='name', y_col='label', target_size=IMG_SIZE,\n","    class_mode='categorical', color_mode='rgb', shuffle=False, batch_size=test_batch_size\n",")\n","print(\"Class indices:\", train_gen.class_indices)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:10:14.566572Z","iopub.execute_input":"2025-03-07T02:10:14.566776Z","iopub.status.idle":"2025-03-07T02:10:17.444911Z","shell.execute_reply.started":"2025-03-07T02:10:14.566757Z","shell.execute_reply":"2025-03-07T02:10:17.444176Z"},"id":"EQTJxRu2LwGR"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<h3 style=\"color: #9AE6B4; font-size: 18px; font-weight: 500; margin-top: 18px; padding-left: 10px; border-left: 3px solid #68D391;\">\n","    Pixel values before generartor\n","</h3>\n"],"metadata":{"id":"ajkVigDELwGR"}},{"cell_type":"code","source":["# Get a single sample\n","sample_row = df[df[\"label\"] == label].iloc[0]\n","img_path = sample_row[\"name\"]\n","\n","# Before generator: Load raw image\n","raw_img = Image.open(img_path)\n","if raw_img.mode != 'RGB':\n","    raw_img = raw_img.convert('RGB')\n","raw_img = raw_img.resize(IMG_SIZE, Image.Resampling.LANCZOS)  # Match generator size\n","raw_array = np.array(raw_img)\n","print(f\"Before Generator (Raw Pixels, Shape: {raw_array.shape}):\")\n","print(raw_array[0, :5, :])  # Print first row, first 5 pixels, all channels"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:10:17.445959Z","iopub.execute_input":"2025-03-07T02:10:17.446376Z","iopub.status.idle":"2025-03-07T02:10:17.470305Z","shell.execute_reply.started":"2025-03-07T02:10:17.446337Z","shell.execute_reply":"2025-03-07T02:10:17.469619Z"},"id":"e_SvmHMvLwGR"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<h3 style=\"color: #9AE6B4; font-size: 18px; font-weight: 500; margin-top: 18px; padding-left: 10px; border-left: 3px solid #68D391;\">\n","    Pixel values after generartor\n","</h3>\n"],"metadata":{"id":"XIW6Tal8LwGS"}},{"cell_type":"code","source":["image_batch, label_batch = next(train_gen)\n","\n","# Print pixel values after generator\n","print(f\"After Generator (Processed Pixels, Shape: {image_batch.shape}):\")\n","print(image_batch[0, 0, :5])  # First image, first 5 rows, all columns, all channels"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:10:17.471131Z","iopub.execute_input":"2025-03-07T02:10:17.471414Z","iopub.status.idle":"2025-03-07T02:10:18.058658Z","shell.execute_reply.started":"2025-03-07T02:10:17.471379Z","shell.execute_reply":"2025-03-07T02:10:18.057903Z"},"id":"6evVxd9-LwGS"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","    3.4. Visualize some images\n","</h2>\n"],"metadata":{"id":"G9I-mKvFLwGS"}},{"cell_type":"code","source":["def plot_sample_images(df, label, num_samples=3, fixed_size=(224, 224)):\n","    # Filter by label\n","    label_df = df[df[\"label\"] == label]\n","    if len(label_df) == 0:\n","        print(f\"No images found for label '{label}'\")\n","        return\n","\n","    # Sample images\n","    samples = label_df.sample(min(num_samples, len(label_df)))\n","\n","    # Set up a simple, nice-looking figure\n","    plt.figure(figsize=(3 * num_samples, 4))\n","\n","    # Plot each image\n","    for i, (idx, row) in enumerate(samples.iterrows()):\n","        img = Image.open(row[\"name\"])\n","        if img.mode != 'RGB':\n","            img = img.convert('RGB')\n","        img = img.resize(fixed_size, Image.Resampling.LANCZOS)\n","\n","        plt.subplot(1, num_samples, i + 1)\n","        plt.imshow(img)\n","        plt.title(f\"{label} #{i + 1}\", fontsize=12)\n","        plt.axis(\"off\")\n","\n","    plt.tight_layout()\n","    plt.show()\n","\n","\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:10:18.059511Z","iopub.execute_input":"2025-03-07T02:10:18.059756Z","iopub.status.idle":"2025-03-07T02:10:18.065808Z","shell.execute_reply.started":"2025-03-07T02:10:18.059724Z","shell.execute_reply":"2025-03-07T02:10:18.064823Z"},"id":"97j45HeHLwGS"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["print(\"\\nNormal Samples:\")\n","plot_sample_images(train_df, \"NORMAL\")\n","\n","print(\"\\nPneumonia Samples:\")\n","plot_sample_images(train_df, \"PNEUMONIA\")"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:10:18.066636Z","iopub.execute_input":"2025-03-07T02:10:18.06687Z","iopub.status.idle":"2025-03-07T02:10:19.055142Z","shell.execute_reply.started":"2025-03-07T02:10:18.06685Z","shell.execute_reply":"2025-03-07T02:10:19.05436Z"},"id":"v6GoKl4ZLwGS"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<div style=\"background-color: rgba(74, 85, 104, 0.2); border-left: 4px solid #805AD5; padding: 14px 16px; margin: 15px 0; border-radius: 3px;\">\n","    <h3 style=\"font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; color: #E9D8FD; font-size: 16px; margin: 0 0 5px 0; font-weight: 600;\">Now data ready for training</h3>\n","</div>"],"metadata":{"id":"RVYc9RZNLwGS"}},{"cell_type":"markdown","source":["<div style=\"margin: 30px 0; height: 2px; background: linear-gradient(90deg, #2D3748, #4299E1, #2D3748); width: 100%;\"></div>"],"metadata":{"id":"8hnE9gKwLwGS"}},{"cell_type":"markdown","source":["<h1 style=\"color: #63B3ED; font-size: 28px; font-weight: 600; padding-bottom: 8px; border-bottom: 2px solid #4299E1; margin-top: 25px;\">\n","    4. Build the Model\n","</h1>\n","Define nedeed functions and callbacks\n"],"metadata":{"id":"cHFFw69DLwGS"}},{"cell_type":"markdown","source":["<div style='background-color: rgba(49, 130, 206, 0.1); border-left: 4px solid #3182CE; '>\n","    <h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","    4.1. Callbacks\n","    </h2>\n","    <p style='padding-left: 20px; padding-bottom: 20px'>\n","</p>\n","</div>\n","\n","\n","\n"],"metadata":{"id":"RxSh8c03LwGS"}},{"cell_type":"code","source":["# Define callbacks\n","callbacks = [\n","    ModelCheckpoint(filepath='/kaggle/working/best_model_V2.keras', monitor='val_accuracy',\n","                    save_best_only=True, verbose=1,mode='max'),\n","]"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:10:19.056196Z","iopub.execute_input":"2025-03-07T02:10:19.0566Z","iopub.status.idle":"2025-03-07T02:10:19.060619Z","shell.execute_reply.started":"2025-03-07T02:10:19.056565Z","shell.execute_reply":"2025-03-07T02:10:19.059723Z"},"id":"n5XFlTEqLwGW"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<div style='background-color: rgba(49, 130, 206, 0.1); border-left: 4px solid #3182CE; '>\n","    <h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","        4.2. Compute class weights with manual boost for \"normal\"\n","    </h2>\n","    <p style='padding-left: 20px; padding-bottom: 20px'>\n","    The purpose of class weights is to address class imbalance in the dataset during training. The weights are used to adjust the contribution of each class to the overall loss function and gradient calculation during backpropagation. By assigning higher weights to the minority class and lower weights to the majority class, the model gives more importance to correctly classifying instances from the minority class.\n","</p>\n","</div>\n","\n","\n"],"metadata":{"id":"uS6-yfvxLwGW"}},{"cell_type":"code","source":["# استخراج أسماء الفئات من المولد\n","classes = list(train_gen.class_indices.keys())  # التأكد من ترتيب الفئات بشكل صحيح\n","class_indices = train_gen.class_indices  # خريطة أسماء الفئات إلى الأرقام\n","\n","# تحويل الفئات النصية إلى أرقام صحيحة لحساب الأوزان\n","y_numeric = train_df['label'].map(class_indices)\n","\n","# حساب الأوزان\n","class_weights = compute_class_weight(class_weight='balanced', classes=np.array(range(len(classes))), y=y_numeric)\n","class_weight_dict_mapped = dict(zip(class_indices.values(), class_weights))\n","class_weight_dict_mapped[0] *= 1.5  # Increase by 20%\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:10:19.061499Z","iopub.execute_input":"2025-03-07T02:10:19.061775Z","iopub.status.idle":"2025-03-07T02:10:19.073651Z","shell.execute_reply.started":"2025-03-07T02:10:19.061746Z","shell.execute_reply":"2025-03-07T02:10:19.072891Z"},"id":"_cl3GvuYLwGW"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<div style='background-color: rgba(49, 130, 206, 0.1); border-left: 4px solid #3182CE; '>\n","    <h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","    4.3. Visualize model performance\n","    </h2>\n","    <p style='padding-left: 20px; padding-bottom: 20px'>\n","</p>\n","</div>\n","\n","\n"],"metadata":{"id":"unVV93tdLwGW"}},{"cell_type":"code","source":["def plot_training_history(history, figsize=(20, 8)):\n","    tr_acc = history.history['accuracy']\n","    tr_loss = history.history['loss']\n","    val_acc = history.history['val_accuracy']\n","    val_loss = history.history['val_loss']\n","    index_loss = np.argmin(val_loss)\n","    val_lowest = val_loss[index_loss]\n","    index_acc = np.argmax(val_acc)\n","    acc_highest = val_acc[index_acc]\n","    Epochs = [i + 1 for i in range(len(tr_acc))]\n","    loss_label = f'best epoch= {index_loss + 1} (val_loss={val_lowest:.4f})'\n","    acc_label = f'best epoch= {index_acc + 1} (val_acc={acc_highest:.4f})'\n","\n","    plt.figure(figsize=figsize)\n","    plt.subplot(1, 2, 1)\n","    plt.plot(Epochs, tr_loss, 'r', label='Training loss')\n","    plt.plot(Epochs, val_loss, 'g', label='Validation loss')\n","    plt.scatter(index_loss + 1, val_lowest, s=150, c='blue', label=loss_label)\n","    plt.title('Training and Validation Loss')\n","    plt.xlabel('Epochs')\n","    plt.ylabel('Loss')\n","    plt.legend()\n","    plt.grid(True)\n","    plt.subplot(1, 2, 2)\n","    plt.plot(Epochs, tr_acc, 'r', label='Training Accuracy')\n","    plt.plot(Epochs, val_acc, 'g', label='Validation Accuracy')\n","    plt.scatter(index_acc + 1, acc_highest, s=150, c='blue', label=acc_label)\n","    plt.title('Training and Validation Accuracy')\n","    plt.xlabel('Epochs')\n","    plt.ylabel('Accuracy')\n","    plt.legend()\n","    plt.grid(True)\n","    plt.tight_layout()\n","    plt.show()"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:10:19.074473Z","iopub.execute_input":"2025-03-07T02:10:19.074768Z","iopub.status.idle":"2025-03-07T02:10:19.08379Z","shell.execute_reply.started":"2025-03-07T02:10:19.074738Z","shell.execute_reply":"2025-03-07T02:10:19.083027Z"},"id":"kl6pMjxNLwGW"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<div style='background-color: rgba(49, 130, 206, 0.1); border-left: 4px solid #3182CE; '>\n","    <h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","    4.4. Model Evaluation\n","    </h2>\n","    <p style='padding-left: 20px; padding-bottom: 20px'>\n","</p>\n","</div>\n","\n"],"metadata":{"id":"8TzE2ieULwGW"}},{"cell_type":"code","source":["def evaluate_model(valid_gen, model):\n","    y_true = []\n","    y_pred = []\n","\n","\n","    for images, labels in valid_gen:\n","        preds = model.predict(images, verbose=0)  # Suppress extra output\n","        batch_y_pred = np.argmax(preds, axis=1)  # Convert probabilities to class labels\n","        batch_y_true = np.argmax(labels, axis=1)  # Convert one-hot encoding to class labels\n","        y_true.extend(batch_y_true)\n","        y_pred.extend(batch_y_pred)\n","\n","        if len(y_true) >= valid_gen.samples:  # Stop when all data is processed\n","            break\n","\n","    # Convert lists to numpy arrays\n","    y_true = np.array(y_true)\n","    y_pred = np.array(y_pred)\n","\n","    # Compute classification metrics\n","    acc = accuracy_score(y_true, y_pred)\n","    precision = precision_score(y_true, y_pred, average=\"weighted\")\n","    recall = recall_score(y_true, y_pred, average=\"weighted\")\n","    f1 = f1_score(y_true, y_pred, average=\"weighted\")\n","\n","    # Get class names from gen\n","    class_names = list(valid_gen.class_indices.keys())\n","\n","    # Print classification report\n","    print(\"📊 Classification Report:\\n\")\n","    print(classification_report(y_true, y_pred, target_names=class_names))\n","\n","    print(f\"✅ Overall Accuracy: {acc*100:.4f}%\")\n","    print(f\"✅ Weighted Precision: {precision:.4f}\")\n","    print(f\"✅ Weighted Recall: {recall:.4f}\")\n","    print(f\"✅ Weighted F1-score: {f1:.4f}\")\n","\n","    # Compute Confusion Matrix\n","    cf_matrix = confusion_matrix(y_true, y_pred)\n","\n","    # Plot Confusion Matrix\n","    group_names = ['True Neg','False Pos','False Neg','True Pos']\n","    group_counts = ['{0:0.0f}'.format(value) for value in\n","                    cf_matrix.flatten()]\n","    group_percentages = ['{0:.2%}'.format(value) for value in\n","                         cf_matrix.flatten()/np.sum(cf_matrix)]\n","    labels = [f'{v1}\\n{v2}\\n{v3}' for v1, v2, v3 in\n","              zip(group_names,group_counts,group_percentages)]\n","    labels = np.asarray(labels).reshape(2,2)\n","    sns.heatmap(cf_matrix, annot=labels, fmt='', cmap='Blues')  # Hide color bar with cbar=False\n","\n","    return acc, precision, recall, f1"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:10:19.084675Z","iopub.execute_input":"2025-03-07T02:10:19.084949Z","iopub.status.idle":"2025-03-07T02:10:19.099013Z","shell.execute_reply.started":"2025-03-07T02:10:19.0849Z","shell.execute_reply":"2025-03-07T02:10:19.098258Z"},"id":"4ieqfyZqLwGW"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<div style='background-color: rgba(49, 130, 206, 0.1); border-left: 4px solid #3182CE; '>\n","    <h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","    4.5. Create Model\n","    </h2>\n","    <p style='padding-left: 20px; padding-bottom: 20px'>\n","    Build and compile a custom model using any pre-trained base from Keras Applications.\n","</p>\n","</div>\n","\n","\n"],"metadata":{"id":"AYUdI7BbLwGW"}},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras import layers, regularizers, Model\n","from tensorflow.keras.utils import plot_model\n","\n","def build_custom_model(\n","    base_model_class,\n","    img_shape,\n","    class_count,\n","    freeze_percentage=0.8,\n","    weights=\"imagenet\",\n","    pooling=\"max\",\n","    learning_rate=0.0001,\n","    plot_file=\"model_plot.png\"\n","):\n","    \"\"\"\n","    Build and compile a custom model using any pre-trained base from Keras Applications.\n","\n","    Args:\n","        base_model_class: Keras Applications model class (e.g., tf.keras.applications.EfficientNetB0).\n","        img_shape: Tuple of input image shape (height, width, channels).\n","        class_count: Number of output classes.\n","        freeze_percentage: Fraction of base model layers to freeze (0 to 1, default 0.8).\n","        weights: Pre-trained weights to use (default \"imagenet\").\n","        pooling: Pooling method for base model (e.g., 'avg', 'max', None).\n","        learning_rate: Learning rate for optimizer (default 0.00001).\n","        plot_file: File path to save model plot (default \"model_plot.png\").\n","\n","    Returns:\n","        Compiled Keras Model.\n","    \"\"\"\n","    # Define input tensor\n","    inputs = tf.keras.Input(shape=img_shape)\n","\n","    # Create pre-trained base model\n","    base_model = base_model_class(\n","        include_top=False,\n","        weights=weights,\n","        input_shape=img_shape,\n","        pooling=pooling\n","    )\n","\n","    # Freeze a percentage of layers\n","    total_layers = len(base_model.layers)\n","    num_freeze = int(total_layers * freeze_percentage)\n","    for layer in base_model.layers[:num_freeze]:\n","        layer.trainable = False\n","    for layer in base_model.layers[num_freeze:]:\n","        layer.trainable = True\n","\n","    # Pass input through base model\n","    x = base_model(inputs)\n","\n","    # Add custom layers\n","    x = layers.BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001)(x)\n","    x = layers.Dense(256, kernel_regularizer=regularizers.l2(0.01),\n","                     activity_regularizer=regularizers.l1(0.003),\n","                     bias_regularizer=regularizers.l1(0.003), activation='relu')(x)\n","    x = layers.Dropout(rate=0.3, seed=123)(x)\n","    x = layers.Dense(class_count, activation='softmax')(x)\n","\n","    # Create and compile the model\n","    model = Model(inputs=inputs, outputs=x)\n","    model.compile(\n","        optimizer=tf.keras.optimizers.Adamax(learning_rate=learning_rate),\n","        loss=\"categorical_crossentropy\",\n","        metrics=[\"accuracy\"]\n","    )\n","\n","    # Display summary and save plot\n","    model.summary()\n","    plot_model(\n","        model,\n","        to_file=plot_file,\n","        show_shapes=True\n","    )\n","    print(f\"Model plot saved as '{plot_file}'\")\n","\n","    return model\n","\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:10:19.099954Z","iopub.execute_input":"2025-03-07T02:10:19.100246Z","iopub.status.idle":"2025-03-07T02:10:19.113879Z","shell.execute_reply.started":"2025-03-07T02:10:19.100217Z","shell.execute_reply":"2025-03-07T02:10:19.113296Z"},"id":"N3XJ8_Y4LwGX"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<div style=\"background-color: rgba(74, 85, 104, 0.2); border-left: 4px solid #805AD5; padding: 14px 16px; margin: 15px 0; border-radius: 3px;\">\n","    <h3 style=\"font-family: 'Source Sans Pro', 'Helvetica Neue', sans-serif; color: #E9D8FD; font-size: 16px; margin: 0 0 5px 0; font-weight: 600;\">Now Time for Train Model</h3>\n","</div>"],"metadata":{"id":"nrnu9Vy1LwGX"}},{"cell_type":"markdown","source":["<h1 style=\"color: #63B3ED; font-size: 28px; font-weight: 600; padding-bottom: 8px; border-bottom: 2px solid #4299E1; margin-top: 25px;\">\n","   5. Model Training\n","</h1>"],"metadata":{"id":"St37vUJ7LwGX"}},{"cell_type":"markdown","source":["<div style='background-color: rgba(49, 130, 206, 0.1); border-left: 4px solid #3182CE; '>\n","    <h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","        5.1. VGG16\n","    </h2>\n","    <p style='padding-left: 20px; padding-bottom: 20px'>\n","    The VGG16 architecture consists of 16 convolutional layers with small 3x3 filters followed by max pooling layers.  It is a very simple, effective CNN model for image classification tasks.  It is a widely-used baseline for comparison benchmarkingin various image classification tasks.\n","</p>\n","</div>\n"],"metadata":{"id":"mDC1WcgbLwGX"}},{"cell_type":"code","source":["# Build with VGG16\n","model_VGG16 = build_custom_model(\n","    VGG16,\n","    IMG_SHAPE,\n","    CLASS_COUNT,\n","    freeze_percentage=1,\n","    weights=\"imagenet\",\n","    pooling=\"max\",\n","    learning_rate=0.0001,\n","    plot_file=\"model_VGG16_plot.png\"\n",")\n","history_VGG16= model_VGG16.fit(\n","    train_gen,\n","    validation_data=valid_gen,\n","    epochs=EPOCHS,\n","    verbose=1,\n","    class_weight=class_weight_dict_mapped,  # استخدام class weights\n","    callbacks=callbacks,  # إضافة callbacks\n","\n",")\n","plot_training_history(history_VGG16, figsize=(20, 8))\n","\n","# Save model\n","model_VGG16.save('VGG16.keras')\n","model_VGG16.save('VGG16.h5')\n","\n","#Evaluate model\n","VGG16_acc,VGG16_precision,VGG16_recall,VGG16_f1=evaluate_model(valid_gen,model_VGG16 )"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:10:19.117488Z","iopub.execute_input":"2025-03-07T02:10:19.117716Z","iopub.status.idle":"2025-03-07T02:19:06.815025Z","shell.execute_reply.started":"2025-03-07T02:10:19.117685Z","shell.execute_reply":"2025-03-07T02:19:06.81427Z"},"id":"fsm3z-NtLwGX"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<div style='background-color: rgba(49, 130, 206, 0.1); border-left: 4px solid #3182CE; '>\n","    <h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","        5.2. MobileNetV2\n","    </h2>\n","    <p style='padding-left: 20px; padding-bottom: 20px'>\n","    The MobileNetV2 architecture is designed for efficient inference on mobile and embedded devices. It uses depthwise separable convolutions to reduce the number of parameters and computations. MobileNetV2 offers a good balance between accuracy and computational efficiency.\n","</p>\n","</div>\n"],"metadata":{"id":"oDigT32ZLwGX"}},{"cell_type":"code","source":["# Build with MobileNetV2\n","model_MobileNetV2 = build_custom_model(\n","    MobileNetV2,\n","    IMG_SHAPE,\n","    CLASS_COUNT,\n","    freeze_percentage=1,\n","    weights=\"imagenet\",\n","    pooling=\"max\",\n","    learning_rate=0.0001,\n","    plot_file=\"model_MobileNetV2_plot.png\"\n",")\n","history_MobileNetV2= model_MobileNetV2.fit(\n","    train_gen,\n","    validation_data=valid_gen,\n","    epochs=EPOCHS,\n","    verbose=1,\n","    class_weight=class_weight_dict_mapped,  # استخدام class weights\n","    callbacks=callbacks,  # إضافة callbacks\n","\n",")\n","plot_training_history(history_MobileNetV2, figsize=(20, 8))\n","\n","# Save model\n","model_MobileNetV2.save('MobileNetV2.keras')\n","model_MobileNetV2.save('MobileNetV2.h5')\n","\n","#Evaluate model\n","MobileNetV2_acc,MobileNetV2_precision,MobileNetV2_recall,MobileNetV2_f1=evaluate_model(valid_gen,model_MobileNetV2 )"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:19:06.816587Z","iopub.execute_input":"2025-03-07T02:19:06.816821Z","iopub.status.idle":"2025-03-07T02:26:57.64537Z","shell.execute_reply.started":"2025-03-07T02:19:06.816799Z","shell.execute_reply":"2025-03-07T02:26:57.644571Z"},"id":"SGPpBFZvLwGX"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<div style='background-color: rgba(49, 130, 206, 0.1); border-left: 4px solid #3182CE; '>\n","    <h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","        5.3. DenseNet\n","    </h2>\n","    <p style='padding-left: 20px; padding-bottom: 20px'>\n","    The DenseNet architecture introduces dense connections, where each layer is connected to every other layer in a feed-forward manner. Dense connections facilitate feature reuse, promote gradient flow, and alleviate the vanishing gradient problem. DenseNet has achieved competitive results on image classification tasks and is known for its parameter efficiency.\n","</p>\n","</div>\n"],"metadata":{"id":"U3SQFw81LwGX"}},{"cell_type":"code","source":["# Build with DenseNet\n","model_DenseNet = build_custom_model(\n","    DenseNet121,\n","    IMG_SHAPE,\n","    CLASS_COUNT,\n","    freeze_percentage=1,\n","    weights=\"imagenet\",\n","    pooling=\"max\",\n","    learning_rate=0.0001,\n","    plot_file=\"model_DenseNet_plot.png\"\n",")\n","history_DenseNet= model_DenseNet.fit(\n","    train_gen,\n","    validation_data=valid_gen,\n","    epochs=EPOCHS,\n","    verbose=1,\n","    class_weight=class_weight_dict_mapped,  # استخدام class weights\n","    callbacks=callbacks,  # إضافة callbacks\n","\n",")\n","plot_training_history(history_DenseNet, figsize=(20, 8))\n","\n","# Save model\n","model_DenseNet.save('DenseNet.keras')\n","model_DenseNet.save('DenseNet.h5')\n","\n","#Evaluate model\n","DenseNet_acc,DenseNet_precision,DenseNet_recall,DenseNet_f1=evaluate_model(valid_gen,model_DenseNet )"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:26:57.64622Z","iopub.execute_input":"2025-03-07T02:26:57.646453Z","iopub.status.idle":"2025-03-07T02:35:43.111897Z","shell.execute_reply.started":"2025-03-07T02:26:57.646432Z","shell.execute_reply":"2025-03-07T02:35:43.111068Z"},"id":"aiyGq5C5LwGX"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<div style='background-color: rgba(49, 130, 206, 0.1); border-left: 4px solid #3182CE; '>\n","    <h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","        5.4. InceptionV3\n","    </h2>\n","    <p style='padding-left: 20px; padding-bottom: 20px'>\n","    The InceptionV3 architecture utilizes a combination of convolutional layers with different filter sizes to capture features at multiple scales. It includes the Inception module, which performs parallel convolutions with different filter sizes and concatenates their outputs. InceptionV3 has shown strong performance on image classification tasks, especially for complex datasets.\n","</p>\n","</div>\n"],"metadata":{"id":"0TqmG5vgLwGX"}},{"cell_type":"code","source":["# Build with InceptionV3\n","model_InceptionV3 = build_custom_model(\n","    InceptionV3,\n","    IMG_SHAPE,\n","    CLASS_COUNT,\n","    freeze_percentage=1,\n","    weights=\"imagenet\",\n","    pooling=\"max\",\n","    learning_rate=0.0001,\n","    plot_file=\"model_InceptionV3_plot.png\"\n",")\n","history_InceptionV3= model_InceptionV3.fit(\n","    train_gen,\n","    validation_data=valid_gen,\n","    epochs=EPOCHS,\n","    verbose=1,\n","    class_weight=class_weight_dict_mapped,  # استخدام class weights\n","    callbacks=callbacks,  # إضافة callbacks\n","\n",")\n","plot_training_history(history_InceptionV3, figsize=(20, 8))\n","\n","# Save model\n","model_InceptionV3.save('InceptionV3.keras')\n","model_InceptionV3.save('InceptionV3.h5')\n","\n","#Evaluate model\n","InceptionV3_acc,InceptionV3_precision,InceptionV3_recall,InceptionV3_f1=evaluate_model(valid_gen,model_InceptionV3 )"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:35:43.112846Z","iopub.execute_input":"2025-03-07T02:35:43.113095Z","iopub.status.idle":"2025-03-07T02:43:58.980134Z","shell.execute_reply.started":"2025-03-07T02:35:43.113072Z","shell.execute_reply":"2025-03-07T02:43:58.979243Z"},"id":"ME1851tELwGX"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<div style='background-color: rgba(49, 130, 206, 0.1); border-left: 4px solid #3182CE; '>\n","    <h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","        5.5. EfficientNetB0\n","    </h2>\n","    <p style='padding-left: 20px; padding-bottom: 20px'>\n","    Description\n","</p>\n","</div>\n"],"metadata":{"id":"yZwSNjjSLwGX"}},{"cell_type":"code","source":["# Build with EfficientNetB0\n","model_EfficientNetB0 = build_custom_model(\n","    EfficientNetB0,\n","    IMG_SHAPE,\n","    CLASS_COUNT,\n","    freeze_percentage=1,\n","    weights=\"imagenet\",\n","    pooling=\"max\",\n","    learning_rate=0.0001,\n","    plot_file=\"model_EfficientNetB0_plot.png\"\n",")\n","history_EfficientNetB0= model_EfficientNetB0.fit(\n","    train_gen,\n","    validation_data=valid_gen,\n","    epochs=EPOCHS,\n","    verbose=1,\n","    class_weight=class_weight_dict_mapped,  # استخدام class weights\n","    callbacks=callbacks,  # إضافة callbacks\n","\n","\n",")\n","plot_training_history(history_EfficientNetB0, figsize=(20, 8))\n","\n","# Save model\n","model_EfficientNetB0.save('EfficientNetB0.keras')\n","model_EfficientNetB0.save('EfficientNetB0.h5')\n","\n","#Evaluate model\n","EfficientNetB0_acc,EfficientNetB0_precision,EfficientNetB0_recall,EfficientNetB0_f1=evaluate_model(valid_gen,model_EfficientNetB0 )"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:43:58.980906Z","iopub.execute_input":"2025-03-07T02:43:58.981208Z","iopub.status.idle":"2025-03-07T02:52:08.544422Z","shell.execute_reply.started":"2025-03-07T02:43:58.981184Z","shell.execute_reply":"2025-03-07T02:52:08.543514Z"},"id":"g2WQfAk4LwGX"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<div style='background-color: rgba(49, 130, 206, 0.1); border-left: 4px solid #3182CE; '>\n","    <h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","        5.6. Compare between models results\n","    </h2>\n","\n","</div>\n"],"metadata":{"id":"laNRvRPWLwGX"}},{"cell_type":"markdown","source":["<h3 style=\"color: #9AE6B4; font-size: 18px; font-weight: 500; margin-top: 18px; padding-left: 10px; border-left: 3px solid #68D391;\">\n","    Convert accuracy values to percentages and round to 2 decimal places\n","</h3>\n","\n"],"metadata":{"id":"-8DtF9N0LwGY"}},{"cell_type":"code","source":["Evaluation = {\n","    'VGG16': [round(VGG16_acc * 100, 2), VGG16_precision, VGG16_recall, VGG16_f1],\n","    'MobileNet': [round(MobileNetV2_acc * 100, 2), MobileNetV2_precision, MobileNetV2_recall, MobileNetV2_f1],\n","    'DenseNet': [round(DenseNet_acc * 100, 2), DenseNet_precision, DenseNet_recall, DenseNet_f1],\n","    'Inception': [round(InceptionV3_acc * 100, 2), InceptionV3_precision, InceptionV3_recall, InceptionV3_f1],\n","    'EfficientNetB0': [round(EfficientNetB0_acc * 100, 2), EfficientNetB0_precision, EfficientNetB0_recall, EfficientNetB0_f1]\n","}"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:52:08.545302Z","iopub.execute_input":"2025-03-07T02:52:08.545536Z","iopub.status.idle":"2025-03-07T02:52:08.550298Z","shell.execute_reply.started":"2025-03-07T02:52:08.545514Z","shell.execute_reply":"2025-03-07T02:52:08.549366Z"},"id":"f_EPOkvmLwGY"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<h3 style=\"color: #9AE6B4; font-size: 18px; font-weight: 500; margin-top: 18px; padding-left: 10px; border-left: 3px solid #68D391;\">\n","    Create DataFrame\n","</h3>\n"],"metadata":{"id":"18tBqFSSLwGY"}},{"cell_type":"code","source":["df= pd.DataFrame.from_dict(Evaluation, columns=['accuracy (%)','precision','recall','f1'],orient='index')\n","df=df.sort_values(by='accuracy (%)', ascending=False)\n","df = df.reset_index().rename(columns={'index': 'model'})\n","df"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:52:08.551389Z","iopub.execute_input":"2025-03-07T02:52:08.551687Z","iopub.status.idle":"2025-03-07T02:52:08.577406Z","shell.execute_reply.started":"2025-03-07T02:52:08.551658Z","shell.execute_reply":"2025-03-07T02:52:08.576627Z"},"id":"Pv7qQWC2LwGY"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<h3 style=\"color: #9AE6B4; font-size: 18px; font-weight: 500; margin-top: 18px; padding-left: 10px; border-left: 3px solid #68D391;\">\n","    Visualize Accuracy\n","</h3>\n"],"metadata":{"id":"DK6YKyEgLwGY"}},{"cell_type":"code","source":["plt.figure(figsize=(15, 10))  # Set figure size\n","\n","ax = sns.barplot(x='model', y='accuracy (%)', data=df)\n","\n","# Add labels to bars\n","ax.bar_label(ax.containers[0], fmt=\"%.2f\", fontsize=16)  # Labels with 2 decimal places\n","\n","# Labels and layout adjustments\n","plt.xlabel(\"Model\", fontsize=16)\n","plt.ylabel(\"Accuracy (%)\", fontsize=16)\n","plt.title(\"Model Accuracy Comparison\", fontsize=16)\n","plt.xticks(rotation=45, fontsize= 16)\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:52:08.578395Z","iopub.execute_input":"2025-03-07T02:52:08.578792Z","iopub.status.idle":"2025-03-07T02:52:08.825648Z","shell.execute_reply.started":"2025-03-07T02:52:08.578756Z","shell.execute_reply":"2025-03-07T02:52:08.824816Z"},"id":"75e1Vc4RLwGY"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<h3 style=\"color: #9AE6B4; font-size: 18px; font-weight: 500; margin-top: 18px; padding-left: 10px; border-left: 3px solid #68D391;\">\n","    Visualize precision, recall, f1\n","</h3>\n"],"metadata":{"id":"urmVz6-fLwGY"}},{"cell_type":"code","source":["# تحويل البيانات إلى الشكل الطويل (long format) لاستخدامها في Seaborn\n","df_melted = df.drop('accuracy (%)', axis= 1).melt(id_vars=\"model\", var_name=\"Metric\", value_name=\"Value\")\n","\n","# رسم الـ Bar Plot\n","plt.figure(figsize=(20, 8))\n","sns.barplot(x=\"Metric\", y=\"Value\", hue=\"model\", data=df_melted)\n","\n","# تحسين شكل المخطط\n","plt.title(\"Model Performance by Metric\")\n","plt.xlabel(\"Metrics\")\n","plt.ylabel(\"Value\")\n","plt.ylim(0, 1)  # القيم بين 0 و 1 لأن المقاييس هي نسب مئوية\n","plt.legend(title=\"Model\")\n","plt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\n","\n","# عرض الرسم\n","plt.show()"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:52:08.826452Z","iopub.execute_input":"2025-03-07T02:52:08.826664Z","iopub.status.idle":"2025-03-07T02:52:09.119002Z","shell.execute_reply.started":"2025-03-07T02:52:08.826645Z","shell.execute_reply":"2025-03-07T02:52:09.118062Z"},"id":"CymUl_MFLwGY"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<div style='background-color: rgba(49, 130, 206, 0.1); border-left: 4px solid #3182CE; '>\n","    <h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","        5.8. Fine-Tuning best model\n","    </h2>\n","\n","</div>\n"],"metadata":{"id":"_zFqv7tdLwGY"}},{"cell_type":"code","source":["# Define callbacks\n","callbacks = [\n","    EarlyStopping(monitor='val_accuracy', patience=15, restore_best_weights=True, verbose=1),\n","    ModelCheckpoint(filepath='/kaggle/working/Enhanced_model_V2.keras', monitor='val_accuracy',\n","                    save_best_only=True, verbose=1,mode='max'),\n","    ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=4, min_lr=1e-6, verbose=1)\n","]"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:52:09.119722Z","iopub.execute_input":"2025-03-07T02:52:09.119953Z","iopub.status.idle":"2025-03-07T02:52:09.124079Z","shell.execute_reply.started":"2025-03-07T02:52:09.119918Z","shell.execute_reply":"2025-03-07T02:52:09.123356Z"},"id":"KBHAhKIOLwGY"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["train_gen = tr_gen.flow_from_dataframe(\n","    train_df, x_col='name', y_col='label', target_size=IMG_SIZE,\n","    class_mode='categorical', color_mode='grayscale', shuffle=True, batch_size=BATCH_SIZE\n",")\n","valid_gen = ts_gen.flow_from_dataframe(\n","    valid_df, x_col='name', y_col='label', target_size=IMG_SIZE,\n","    class_mode='categorical', color_mode='grayscale', shuffle=True, batch_size=BATCH_SIZE\n",")\n","test_gen = ts_gen.flow_from_dataframe(\n","    test_df, x_col='name', y_col='label', target_size=IMG_SIZE,\n","    class_mode='categorical', color_mode='grayscale', shuffle=False, batch_size=test_batch_size\n",")"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:52:09.124754Z","iopub.execute_input":"2025-03-07T02:52:09.124973Z","iopub.status.idle":"2025-03-07T02:52:11.006578Z","shell.execute_reply.started":"2025-03-07T02:52:09.124926Z","shell.execute_reply":"2025-03-07T02:52:11.00578Z"},"id":"5pnikl40LwGY"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["model= build_custom_model(\n","    EfficientNetB0,\n","    IMG_SHAPE,\n","    CLASS_COUNT,\n","    freeze_percentage=0,\n","    weights=\"imagenet\",\n","    pooling=\"max\",\n","    learning_rate=0.0001,\n","    plot_file=\"model_plot.png\"\n",")\n","# Fit with GPU (Kaggle handles GPU automatically)\n","history = model.fit(\n","    train_gen,\n","    validation_data=valid_gen,\n","    epochs=100,\n","    verbose=1,\n","    class_weight= class_weight_dict_mapped,\n","    callbacks=callbacks\n",")\n","\n","# Evaluate on test set\n","test_loss, test_accuracy = model.evaluate(test_gen, verbose=1)\n","print(f\"\\nTest Accuracy: {test_accuracy:.4f}\")\n","print(f\"Test Loss: {test_loss:.4f}\")\n","plot_training_history(history)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T02:52:11.007373Z","iopub.execute_input":"2025-03-07T02:52:11.007595Z","iopub.status.idle":"2025-03-07T03:26:17.510335Z","shell.execute_reply.started":"2025-03-07T02:52:11.007575Z","shell.execute_reply":"2025-03-07T03:26:17.509501Z"},"id":"atoMQz_1LwGY"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["ts_length = len(test_df)\n","test_batch_size = max(sorted([ts_length // n for n in range(1, ts_length + 1) if ts_length%n == 0 and ts_length/n <= 80]))\n","test_steps = ts_length // test_batch_size\n","\n","train_score = model.evaluate(train_gen, steps= test_steps, verbose= 1)\n","valid_score = model.evaluate(valid_gen, steps= test_steps, verbose= 1)\n","test_score = model.evaluate(test_gen, steps= test_steps, verbose= 1)\n","\n","print(\"Train Loss: \", train_score[0])\n","print(\"Train Accuracy: \", train_score[1])\n","print('-' * 20)\n","print(\"Validation Loss: \", valid_score[0])\n","print(\"Validation Accuracy: \", valid_score[1])\n","print('-' * 20)\n","print(\"Test Loss: \", test_score[0])\n","print(\"Test Accuracy: \", test_score[1])"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T03:26:17.511524Z","iopub.execute_input":"2025-03-07T03:26:17.511898Z","iopub.status.idle":"2025-03-07T03:26:31.576698Z","shell.execute_reply.started":"2025-03-07T03:26:17.511858Z","shell.execute_reply":"2025-03-07T03:26:31.576036Z"},"id":"s2yjkx8gLwGY"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<h1 style=\"color: #63B3ED; font-size: 28px; font-weight: 600; padding-bottom: 8px; border-bottom: 2px solid #4299E1; margin-top: 25px;\">\n","    6. Prediction\n","</h1>"],"metadata":{"id":"FzueNNSELwGY"}},{"cell_type":"markdown","source":["<div style='background-color: rgba(49, 130, 206, 0.1); border-left: 4px solid #3182CE; '>\n","    <h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","        6.1 Prediction on valid data\n","    </h2>\n","    <p style='padding-left: 20px; padding-bottom: 20px'>\n","</p>\n","</div>\n"],"metadata":{"id":"wt5QbJ5uLwGY"}},{"cell_type":"code","source":["# Reset generator before looping (important!)\n","valid_gen.reset()\n","\n","# Collect all images & labels\n","all_images = []\n","all_labels = []\n","\n","# Extract multiple batches\n","for _ in range(len(valid_gen)):  # Loop through all batches\n","    images, labels = next(valid_gen)\n","    all_images.extend(images)\n","    all_labels.extend(labels)\n","\n","# Convert lists to numpy arrays\n","all_images = np.array(all_images)\n","all_labels = np.array(all_labels)\n","\n","# Get model predictions\n","predictions = model.predict(all_images)\n","\n","# Convert one-hot encoded labels to class indices\n","true_classes = np.argmax(all_labels, axis=1)\n","predicted_classes = np.argmax(predictions, axis=1)\n","\n","# Extract class names\n","class_names = list(valid_gen.class_indices.keys())\n","\n","# Shuffle images, labels, and predictions together\n","indices = np.random.permutation(len(all_images))\n","shuffled_images = all_images[indices]\n","shuffled_true_classes = true_classes[indices]\n","shuffled_predicted_classes = predicted_classes[indices]\n","shuffled_predictions = predictions[indices]  # Shuffle prediction confidence too\n","\n","# Plot random images with true & predicted labels\n","fig, axes = plt.subplots(3, 3, figsize=(10, 10))\n","\n","for i, ax in enumerate(axes.flat):\n","    ax.imshow(shuffled_images[i])\n","    ax.axis(\"off\")\n","\n","    # Get labels & prediction confidence\n","    true_label = CLASS_NAMES[shuffled_true_classes[i]]\n","    pred_label = CLASS_NAMES[shuffled_predicted_classes[i]]\n","    confidence = 100 * np.max(shuffled_predictions[i])  # Get highest confidence\n","\n","    # Set title with color\n","    ax.set_title(f\"True: {true_label}\\nPred: {pred_label} ({confidence:.1f}%)\",\n","                 color=\"green\" if true_label == pred_label else \"red\")\n","\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T03:26:31.577504Z","iopub.execute_input":"2025-03-07T03:26:31.577739Z","iopub.status.idle":"2025-03-07T03:26:53.084594Z","shell.execute_reply.started":"2025-03-07T03:26:31.577707Z","shell.execute_reply":"2025-03-07T03:26:53.08365Z"},"id":"0nQApToXLwGY"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<div style='background-color: rgba(49, 130, 206, 0.1); border-left: 4px solid #3182CE; '>\n","    <h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","        6.2 Prediction on test data\n","    </h2>\n","    <p style='padding-left: 20px; padding-bottom: 20px'>\n","</p>\n","</div>\n"],"metadata":{"id":"mpTRBNnNLwGY"}},{"cell_type":"code","source":["# Reset generator before looping (important!)\n","test_gen.reset()\n","\n","# Collect all images & labels\n","all_images = []\n","all_labels = []\n","\n","# Extract multiple batches\n","for _ in range(len(test_gen)):  # Loop through all batches\n","    images, labels = next(test_gen)\n","    all_images.extend(images)\n","    all_labels.extend(labels)\n","\n","# Convert lists to numpy arrays\n","all_images = np.array(all_images)\n","all_labels = np.array(all_labels)\n","\n","# Get model predictions\n","predictions = model.predict(all_images)\n","\n","# Convert one-hot encoded labels to class indices\n","true_classes = np.argmax(all_labels, axis=1)\n","predicted_classes = np.argmax(predictions, axis=1)\n","\n","# Extract class names\n","class_names = list(test_gen.class_indices.keys())\n","\n","# Shuffle images, labels, and predictions together\n","indices = np.random.permutation(len(all_images))\n","shuffled_images = all_images[indices]\n","shuffled_true_classes = true_classes[indices]\n","shuffled_predicted_classes = predicted_classes[indices]\n","shuffled_predictions = predictions[indices]  # Shuffle prediction confidence too\n","\n","# Plot random images with true & predicted labels\n","fig, axes = plt.subplots(3, 3, figsize=(10, 10))\n","\n","for i, ax in enumerate(axes.flat):\n","    ax.imshow(shuffled_images[i])\n","    ax.axis(\"off\")\n","\n","    # Get labels & prediction confidence\n","    true_label = CLASS_NAMES[shuffled_true_classes[i]]\n","    pred_label = CLASS_NAMES[shuffled_predicted_classes[i]]\n","    confidence = 100 * np.max(shuffled_predictions[i])  # Get highest confidence\n","\n","    # Set title with color\n","    ax.set_title(f\"True: {true_label}\\nPred: {pred_label} ({confidence:.1f}%)\",\n","                 color=\"green\" if true_label == pred_label else \"red\")\n","\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T03:26:53.085832Z","iopub.execute_input":"2025-03-07T03:26:53.086213Z","iopub.status.idle":"2025-03-07T03:27:06.440306Z","shell.execute_reply.started":"2025-03-07T03:26:53.086175Z","shell.execute_reply":"2025-03-07T03:27:06.43937Z"},"id":"scM9wuNKLwGZ"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<div style='background-color: rgba(49, 130, 206, 0.1); border-left: 4px solid #3182CE; '>\n","    <h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","        6.3 Prediction on url image\n","    </h2>\n","    <p style='padding-left: 20px; padding-bottom: 20px'>\n","</p>\n","</div>\n"],"metadata":{"id":"jWOXgjSaLwGZ"}},{"cell_type":"code","source":["url = \"https://static.elsevier.es/multimedia/21735727/0000004600000007/v1_202206240715/S2173572722000819/v1_202206240715/en/main.assets/gr1.jpeg?idApp=WMIE\"\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T03:27:06.441256Z","iopub.execute_input":"2025-03-07T03:27:06.44158Z","iopub.status.idle":"2025-03-07T03:27:06.445604Z","shell.execute_reply.started":"2025-03-07T03:27:06.44154Z","shell.execute_reply":"2025-03-07T03:27:06.444755Z"},"id":"LeDKreU2LwGZ"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["import requests\n","def predict_image_from_url(url):\n","    try:\n","        # تحميل الصورة من الرابط\n","        response = requests.get(url)\n","        if response.status_code != 200:\n","            raise ValueError(\"Failed to download image.\")\n","\n","        # تحويل الصورة إلى مصفوفة NumPy\n","        image_array = np.array(bytearray(response.content), dtype=np.uint8)\n","\n","        # فك تشفير الصورة باستخدام OpenCV\n","        image = cv2.imdecode(image_array, cv2.IMREAD_COLOR)\n","        if image is None:\n","            raise ValueError(\"Invalid image format or corrupted image.\")\n","\n","        # تغيير الحجم إلى (224, 224) - يمكن تعديله حسب النموذج المستخدم\n","        image = cv2.resize(image, (224, 224))\n","\n","        # تحويل BGR إلى RGB لأن OpenCV يقرأ الصور في BGR\n","        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n","\n","        # تحويل الصورة إلى نوع `float32` وتطبيع القيم بين 0 و 1\n","        image = image.astype(\"float32\") / 255.0\n","\n","        # توسيع الأبعاد لتتوافق مع إدخال النموذج (batch_size, height, width, channels)\n","        image = np.expand_dims(image, axis=0)\n","\n","        # التأكد من شكل الصورة قبل التنبؤ\n","        print(\"Processed image shape:\", image.shape)  # يجب أن يكون (3, 224, 224, 1)\n","\n","        # إجراء التنبؤ باستخدام النموذج\n","        predict_img = model.predict(image)\n","\n","        # استخراج التصنيف الأكثر احتمالًا\n","        predict_img_label = CLASS_NAMES[np.argmax(predict_img)]\n","\n","        return predict_img_label, image\n","\n","    except Exception as e:\n","        print(\"Error:\", str(e))\n","        return None\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T03:27:06.446577Z","iopub.execute_input":"2025-03-07T03:27:06.446792Z","iopub.status.idle":"2025-03-07T03:27:06.454603Z","shell.execute_reply.started":"2025-03-07T03:27:06.446773Z","shell.execute_reply":"2025-03-07T03:27:06.453743Z"},"id":"VuWahU1SLwGZ"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["predict_img_label,image= predict_image_from_url(url)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T03:27:06.455625Z","iopub.execute_input":"2025-03-07T03:27:06.455972Z","iopub.status.idle":"2025-03-07T03:27:13.715701Z","shell.execute_reply.started":"2025-03-07T03:27:06.455918Z","shell.execute_reply":"2025-03-07T03:27:13.715024Z"},"id":"uSvC7r8LLwGZ"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# Remove batch dimension (convert from (1, 224, 224, 3) to (224, 224, 3))\n","image = np.squeeze(image, axis=0)\n","plt.imshow(image)\n","plt.title(predict_img_label)\n","plt.axis('off')\n","plt.show()"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T03:27:13.71673Z","iopub.execute_input":"2025-03-07T03:27:13.717073Z","iopub.status.idle":"2025-03-07T03:27:13.869278Z","shell.execute_reply.started":"2025-03-07T03:27:13.71705Z","shell.execute_reply":"2025-03-07T03:27:13.868459Z"},"id":"Nh51eNT5LwGZ"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<div style='background-color: rgba(49, 130, 206, 0.1); border-left: 4px solid #3182CE; '>\n","    <h2 style=\"background: linear-gradient(90deg, #2A4365 0%, #2C5282 100%); color: #EBF8FF; font-size: 20px; padding: 8px 12px; border-radius: 4px; margin-top: 22px; font-weight: 500;\">\n","       6.4 Predict on local image\n","    </h2>\n","    <p style='padding-left: 20px; padding-bottom: 20px'>\n","</p>\n","</div>\n"],"metadata":{"id":"QAD9vJGwLwGZ"}},{"cell_type":"code","source":["# قائمة الفئات (استبدلها بالفئات الفعلية للنموذج)\n","CLASS_NAMES = [\"NORMAL\", \"PNEUMONIA\"]\n","\n","def predict_and_plot(img_path, model):\n","    \"\"\" يأخذ مسار الصورة، يعالجها بنفس طريقة التدريب، ثم يتنبأ بها ويعرض النتيجة \"\"\"\n","\n","    # تحميل الصورة وتحويلها إلى Grayscale بنفس طريقة `ImageDataGenerator`\n","    img = Image.open(img_path).convert('L')  # 'L' تعني صورة رمادية (Grayscale)\n","\n","    # تحجيم الصورة إلى 224x224 كما هو مطلوب في EfficientNetB0\n","    img_resized = img.resize((224, 224))\n","\n","    # تحويل الصورة إلى مصفوفة NumPy بنفس طريقة `ImageDataGenerator`\n","    img_array = img_to_array(img_resized)  # يحول الصورة إلى NumPy Array\n","    img_array = np.expand_dims(img_array, axis=0)  # إضافة بُعد الدفعة -> (1, 224, 224, 1)\n","\n","    # التأكد من أن النموذج مُحمّل\n","    if model is None:\n","        raise ValueError(\"النموذج لم يتم تحميله. تأكد من تحميله قبل استدعاء الدالة.\")\n","\n","    # التنبؤ بالفئة\n","    predictions = model.predict(img_array)\n","    predicted_class = np.argmax(predictions, axis=1)[0]\n","    confidence = np.max(predictions) * 100  # حساب الثقة\n","\n","    # عرض الصورة مع التنبؤ\n","    plt.figure(figsize=(6, 6))\n","    plt.imshow(img, cmap='gray')  # عرض الصورة الرمادية\n","    plt.axis('off')\n","    plt.title(f\"Predicted: {CLASS_NAMES[predicted_class]} ({confidence:.1f}%)\",\n","              color=\"green\" if confidence > 50 else \"red\")  # لون العنوان حسب الثقة\n","    plt.show()\n","\n","    return CLASS_NAMES[predicted_class], confidence"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T03:27:13.870269Z","iopub.execute_input":"2025-03-07T03:27:13.870586Z","iopub.status.idle":"2025-03-07T03:27:13.876901Z","shell.execute_reply.started":"2025-03-07T03:27:13.870555Z","shell.execute_reply":"2025-03-07T03:27:13.875998Z"},"id":"YzyHd50RLwGZ"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["predict_and_plot('/kaggle/input/chest-image/n2.jpeg', model)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-07T03:27:13.877848Z","iopub.execute_input":"2025-03-07T03:27:13.87818Z","iopub.status.idle":"2025-03-07T03:27:17.876598Z","shell.execute_reply.started":"2025-03-07T03:27:13.878148Z","shell.execute_reply":"2025-03-07T03:27:17.875715Z"},"id":"ylrnBxaDLwGZ"},"outputs":[],"execution_count":null},{"cell_type":"code","source":[],"metadata":{"trusted":true,"id":"6DfZfmcwLwGZ"},"outputs":[],"execution_count":null}]}